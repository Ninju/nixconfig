let mapleader=","

" --------
" KEY MAPS
" --------

nmap <silent> <leader>eev :edit $MYVIMRC<CR>
nmap <silent> <leader>ev :edit ~/.vimrc<CR>
nmap <silent> <leader>sv :source $MYVIMRC<CR>

map <silent> <leader>w :BufExplorer<CR>

nmap <silent> <leader>/ :nohlsearch<CR>

" ------
" GENERAL
" ------

" Show line numbers
set number

" Turn on syntax highlighting
syntax on

" Do not break lines
set nowrap

" If I decide to set wrap,
" it's probably because I'm writing/reading regular text
" so break at word boundaries
set linebreak

" I decided to always `set wrap` anyways.
set wrap

" Skim templates should receive the same syntax highlighting as Slim templates
au BufNewFile,BufRead *.skim set filetype=slim
au BufRead,BufRead *.skim set filetype=slim

"Gemfile and Guardfile should get Ruby syntax highlighting
au BufNewFile,BufRead Gemfile set filetype=ruby
au BufRead,BufRead Gemfile set filetype=ruby

au BufNewFile,BufRead Guardfile set filetype=ruby
au BufRead,BufRead Guardfile set filetype=ruby


" Credit - http://damien.lespiau.name/blog/2009/03/18/per-project-vimrc/comment-page-1/
" -------------------------------------------------------------------------------------
" Enable per-directory .vimrc files
set exrc

" Disable unsafe commands in local .vimrc files
set secure


" ----------
" INDENTATION
" ----------

" Copies indentation from previous line
" 'autoindent' does not interfere with filetype based indentation
set autoindent
"
" Indents before '}' and matches indentation of '}' to matching '{'
" (no it doesn't)
" set smartindent

" Use spaces instead of tabs
set expandtab

" Number of spaces to move when '<<', '>>', and '==' commands are used
set shiftwidth=2

" Number of spaces to insert when press <TAB> -- should be the same value as shiftwidth
set softtabstop=2


" -------
" FILETYPE
" -------

" Enable plugins for specific file types
filetype plugin on

" Enable customisation of indentation based on filetype
" Indentation scripts are in ~/.vim/indent
filetype plugin indent on


" --------
" SEARCHING
" --------

" Highlight search results
" set nohls
set hlsearch

" Show matches while searching
set incsearch

" Ignore case when searching
set ignorecase

" Fix backspace not working
set nocompatible
set backspace=2


let g:ctrlp_path_nolim = 1
let g:ctrlp_max_files = 100000

" --------
" KEY MAPS
" --------

" Automatically reselect previous selected VISUAL selection immediately after
" indenting
:vmap > >gv
:vmap < <gv

" Copy visual selection to the clipboard
:vmap "" "+y

" Credit - 'Ben Schmidt' at 'http://vim.1045645.n5.nabble.com/Open-file-relative-to-current-file-s-directory-td1181344.html'
" Map '%/' to current working directory
:cmap %/ <C-r>=expand('%:p:h')<CR>/

" hi Visual term=reverse cterm=reverse guibg=Grey
" highlight PmenuSel ctermfg=0 ctermbg=6

hi StatusLine   ctermfg=15  guifg=#ffffff ctermbg=239 guibg=#4e4e4e cterm=bold gui=bold
hi StatusLineNC ctermfg=249 guifg=#b2b2b2 ctermbg=237 guibg=#3a3a3a cterm=none gui=none

augroup CursorLine
    au!
    au VimEnter,WinEnter,BufWinEnter * setlocal cursorline
    au WinLeave * setlocal nocursorline
augroup END

" Copy current filename to clipboard
" ----------------------------------
" ,cs copies just the filename.
" ,cl copies the filename including it's full path.
" ,c8 copies the filename in 8.3 format for DOS and Windows 9x
"
" Convert slashes to backslashes for Windows.
if has('win32')
  nmap ,cs :let @*=substitute(expand("%"), "/", "\\", "g")<CR>
  nmap ,cl :let @*=substitute(expand("%:p"), "/", "\\", "g")<CR>

  " This will copy the path in 8.3 short format, for DOS and Windows 9x
  nmap ,c8 :let @*=substitute(expand("%:p:8"), "/", "\\", "g")<CR>
else
  nmap ,cs :let @*=expand("%")<CR>
  nmap ,cl :let @*=expand("%:p")<CR>
endif

"" Taken from work

syntax enable
if has("gui_running")
  set background=light
else
  let g:solarized_termcolors=256
  set background=dark
end

" nice schemes:
" --- LIGHT ----
"  * Shine
"  * Morning
"  * PeachPuff
"  * Delek
"
" --- DARK ----
"  * Slate (grey and subtle but weird highlighting of words)
"  * Evening
"
" colorscheme darkblue
colorscheme slate

set cursorline
set colorcolumn=80

" Search results to black text color so I can actually see them!
highlight Search cterm=NONE ctermbg='Yellow' ctermfg='Black'
highlight IncSearch cterm=NONE ctermbg='LightYellow' ctermfg='Black'

" hi CursorLine   cterm=NONE ctermbg=darkred ctermfg=white
" almost black - I like this one a lot
highlight CursorLine   cterm=NONE ctermbg=234 ctermfg=NONE

" hi CursorLine cterm=underline
" hi CursorLine gui=underline

nnoremap H :set cursorline! cursorcolumn!<CR>

" set the prefered colours, pick one line here only.
" " dark grey, better you can get if you don't support 256 colours
" hi CursorLine   cterm=NONE ctermbg=8 ctermfg=NONE
" " light grey, no 256 colors
" hi CursorLine   cterm=NONE ctermbg=7 ctermfg=NONE
" " dark redish
" hi CursorLine   cterm=NONE ctermbg=52 ctermfg=NONE
" " dark bluish
" hi CursorLine   cterm=NONE ctermbg=17 ctermfg=NONE
" " very light grey
" hi CursorLine   cterm=NONE ctermbg=254 ctermfg=NONE
" " yelowish
" hi CursorLine   cterm=NONE ctermbg=229 ctermfg=NONE
" " almost black
" hi CursorLine   cterm=NONE ctermbg=234 ctermfg=NONE

hi Visual cterm=reverse ctermfg=211 ctermbg=000 gui=reverse guifg=#8080ff guibg=fg

" From Damian Conway 'more instantly better vim'
" https://www.youtube.com/watch?v=aHm36-na4-4&feature=youtu.be#t=4m59s
exec "set listchars=tab:\uBB\uBB,nbsp:_,trail:\u00AC"
set list

let g:bufExplorerShowRelativePath=1

" vim-rspec mappings
map <Leader>a :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>d :call RunLastSpec()<CR>
map <Leader>p :call RunAllSpecs()<CR>

" Emacs keybindings
map <C-x><left> :bp<CR>
map <C-x><right> :bn<CR>
map <C-x><C-b> :BufExplorer<CR>

map <C-x>o :wincmd w<CR>
map <C-x>3 :vsplit<CR>

let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
        \ }


let g:tagbar_type_go = {
	\ 'ctagstype' : 'go',
	\ 'kinds'     : [
		\ 'p:package',
		\ 'i:imports:1',
		\ 'c:constants',
		\ 'v:variables',
		\ 't:types',
		\ 'n:interfaces',
		\ 'w:fields',
		\ 'e:embedded',
		\ 'm:methods',
		\ 'r:constructor',
		\ 'f:functions'
	\ ],
	\ 'sro' : '.',
	\ 'kind2scope' : {
		\ 't' : 'ctype',
		\ 'n' : 'ntype'
	\ },
	\ 'scope2kind' : {
		\ 'ctype' : 't',
		\ 'ntype' : 'n'
	\ },
	\ 'ctagsbin'  : 'gotags',
	\ 'ctagsargs' : '-sort -silent'
        \ }

map <C-x>2 :split<CR>
map <C-x><C-k> :wincmd q<CR> " TODO: remap to kill buffer, not quit window
map <C-x>0 :wincmd q<CR>
map <C-x>1 :wincmd o<CR>

" Does not work in Command mode
map <C-g> <Esc>

nmap ,, <C-]>
nmap ,. <C-o>
vmap ,, <C-]>
vmap ,. <C-o>

map <C-a> 0
map <C-e> $

" Projectile like bindings
nmap <Leader>pf :CtrlP<CR>
nmap <Leader>pp :CtrlPDir ~/src/git/<CR>

" let g:rspec_command = 'call Send_to_Tmux("bundle exec rspec {spec}\n")'
let g:rspec_command = "./bin/rspec {spec}\n"
let NERDSpaceDelims=1

" Don't clear Ctrl+P cache on exit
let g:ctrlp_clear_cache_on_exit=0
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|deps\|_build'

runtime macros/matchit.vim

nnoremap <silent> <C-p> :CtrlP<CR>

set backup
set undofile
set swapfile

set backupdir=~/.vim/files-backup//,/tmp/vim-backup-files//
set directory=~/.vim/files-swap//,/tmp/vim-swap-files//
set undodir=~/.vim/files-undo//,/tmp/vim-undo-files//
